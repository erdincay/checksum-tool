/*
The MIT License

Copyright (c) 2007 Ixonos Plc, Kimmo Varis <kimmo.varis@ixonos.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// $Id$

using System;
using System.IO;
using System.Collections.Generic;
using NUnit.Framework;

namespace CheckSumTool
{
    /// <summary>
    /// Implement MD5 file handler.
    /// File format specification is available e.g. in:
    /// http://www.joegeluso.com/software/file-formats/md5.htm
    /// </summary>
    public class MD5File : IFile
    {
        /// <summary>
        /// Read data from file.
        /// </summary>
        /// <param name="reader">File for reading.</param>
        /// <returns>Readed items, checkSum and filename.</returns>
        public List<Pair<string>> ReadData(TextFileReader reader)
        {
            char[] separators = new char[] {'|', };
            List<Pair<string>> itemList = reader.ReadSplittedLines(separators);

            return itemList;
        }

        /// <summary>
        /// Write header info.
        /// </summary>
        /// <param name="file">Target file to write.</param>
        public void Header(StreamWriter file)
        {
            // Write program name and version as comment
            SumFileInfo info = new SumFileInfo();
            string prognameline = "; MD5 sums generated by ";
            prognameline += info.ProgramName;
            prognameline += " version ";
            prognameline += info.ProgramVersion;
            prognameline += Environment.NewLine;
            file.Write(prognameline);

            // Write url as comment
            string urlline = "; ";
            urlline += info.ProgramUrl;
            urlline += Environment.NewLine;
            file.Write(urlline);

            // Write file creation time as comment
            string timeline = "; Created ";
            timeline += Convert.ToString(DateTime.Now);
            timeline += Environment.NewLine;
            file.Write(timeline);
        }

        /// <summary>
        /// Write items to the file.
        /// </summary>
        /// <param name="file">Target file to write.</param>
        /// <param name="checkSum">CheckSum value.</param>
        /// <param name="relativePath">Relative path value.</param>
        public void WriteDataRow(StreamWriter file, string checksum, string relativePath)
        {
            string separator = "|";

            file.Write(checksum);
            file.Write(separator);
            file.Write(relativePath);
            file.Write(Environment.NewLine);
        }

        /// <summary>
        /// Write header info.
        /// </summary>
        /// <param name="file">Target file to write.</param>
        public void Footer(StreamWriter file)
        {

        }
    }

    [TestFixture]
    public class TestMD5File
    {
        // Precalculated SFV-checkSum
        string[] _checkSum = {"78cf91daf373e286415c36a8b035dba9",
                              "e76f8a2f7ae08dfa86df819e7d7639c3",
                              "9f089d9a25ea55c459680009910bec73" };

        int _testFile1RowCount = 3;

        /// <summary>
        /// Test reading file TestFile1.md5 and check checksum value.
        /// </summary>
        [Test]
        public void ReadFile()
        {
            TextFileReader reader = new TextFileReader(@"../../TestData/UnitTestFolder/TestFile1.md5");

            MD5File sumFile = new MD5File();
            List<Pair<string>> itemList = sumFile.ReadData(reader);

            int i = 0;
            foreach (Pair<string> item in itemList)
            {
                // TODO: must validity-check values!
                Assert.AreEqual(item.Item1.ToString(), _checkSum[i]);
                i++;
            }
        }
        /// <summary>
        /// Test reading file TestFile1.md5 and checking row count
        /// </summary>
        [Test]
        public void ReadFileAndCheckRowCount()
        {
            TextFileReader reader = new TextFileReader(@"../../TestData/UnitTestFolder/TestFile1.md5");

            MD5File sumFile = new MD5File();
            List<Pair<string>> itemList = sumFile.ReadData(reader);

            Assert.AreEqual(itemList.Count, _testFile1RowCount);
        }
    }
}
