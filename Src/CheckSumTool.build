<?xml version="1.0"?>

<!--
The MIT License

Copyright (c) 2007-2008 Ixonos Plc
Copyright (c) 2007-2009 Kimmo Varis <kimmov@winmerge.org>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

=====

CheckSum Tool NAnt build file.

This build file also requires NAntContrib to be setup. Environment variable
NANTCONTRIB_DIR must point to NAntContrib folder.

Main targets to call:
# clean - removes workspace build files
# debug - builds debug version in workspace
# release - builds release version in workspace
# svn_build - exports sources and builds them (release build)
# distribution - creates CheckSum Tool distribution from SVN
 - includes source- and binary-zips and installer
# build_manual - builds user manual

Targets that can be also called:
# source zip - exports sources and creates zip file from them
# build_installer - builds installer
# create_bin_zip - creates zip file from binaries + docs

$Id$
-->

<project name="CheckSumTool" default="build" basedir=".">
 	
    <!-- [1] SETUP -->
 	<!-- Various propertis defining folders and other settings. -->
    <!-- Modify these (especially the paths!) to match your environment! -->
    <property name="project.name" value="CheckSumTool" />
    <property name="project.version" value="0.7" />
    <property name="executable.name" value="${project.name}.exe" />

    <property name="project.config" value="debug" overwrite="false" />
	<!-- Relative folder for binaries created -->
    <property name="build.dir" value="../Build/Debug/" overwrite="false" />
    <!-- NUnit installation folder -->
    <property name="nunit.dir" value="C:/Program Files/NUnit 2.4.8/bin" />
    
    <!-- SVN repository URL / path -->
    <property name="svn.export.local" value="true"/>
    <property name="svn.repository.uri"
        value="https://checksumtool.svn.sourceforge.net/svnroot/checksumtool/trunk"/>
    <!-- Folder for repository builds -->
    <property name="svn.checkout.dir" value="../dist/export"/>
    <!-- Folder where distribution is created -->
    <property name="dist.dir" value="../dist/${project.name}-${project.version}" />
    
    <!-- Manual's folders -->
    <property name="src.dir.manual" value="../Documents/Manual" />
    <property name="build.dir.manual" value="${build.dir}/Manual" />
    
    <!-- Additional defines for C# compiler -->
    <property name="csc.defines" value=""/>
    
    <!-- Settings for NSIS installer -->
    <property name="nsis.bin" value="C:/Program Files/NSIS/makensis.exe" />
    <property name="nsis.script" value="CheckSumTool.nsi" />
    <property name="nsis.log" value="nsis.log" />

    <!-- Additional tools for building manual -->
    <property name="python" value="c:/python25/python.exe" />
    <property name="asciidoc" value="c:/Tools/AsciiDoc/asciidoc.py" />
    
    <!-- [2] LOCAL BUILD TARGETS -->
    <!-- These are directly-callable high-level build targets. -->
    <!-- These builds happen in current workspace. -->
    
    <!-- This is directly runnable debug target -->
    <target name="debug" description="Runs debug target">
        <property name="project.config" value="debug" />
        <call target="clean" />
        <call target="build" />
    </target>
    
    <!-- This is directly runnable release target -->
    <target name="release" description="Runs release target">
        <property name="project.config" value="release" />
        <call target="clean" />
        <call target="build" />
    </target>


    <!-- [3] REPOSITORY BUILD TARGETS -->
    <!-- These are directly-callable high-level build targets. -->
    <!-- These builds happen from checked-out sources, not from workspace. -->
    
    <!-- This target builds sources exported from the SVN repository. -->
    <!-- The idea is to call build file from exported source directory! -->
    <target name="svn_build" description="Build sources exported from SVN"
            depends="svn_export">
        <loadtasks assembly="${path::combine(environment::get-variable('NANTCONTRIB_DIR'),
            'bin/NAnt.Contrib.Tasks.dll')}" />
        
        <!-- We only do release builds from SVN -->
        <property name="build.dir" value="../Build/Release/" />
        <property name="project.config" value="release" />
        
        <!-- Copy build file from source folder to export folder. -->
        <!-- This allows local modifications and tests without committing
          the build file. And allows people not having write access to SVN to
          modify build file. -->
        <copy file="CheckSumTool.build" todir="${svn.checkout.dir}/Src"
              overwrite="true" />
        
        <!-- Now we have exported sources, lets build them.. -->
        <!-- No need to run clean target as this is clean checkout from SVN! -->
        <nant buildfile="${svn.checkout.dir}/Src/CheckSumTool.build"
                inheritall="true" target="${project.config}">
            <properties>
                <property name="svn.checkout.dir" value="../" />
            </properties>
        </nant>
    </target>
    
    <!-- This targets exports and builds whole CheckSum Tool distribution from
      SVN. The task produces binary- and source zips and installer
      executable. -->
    <target name="distribution" description="Creates a distribution from SVN"
        depends="svn_build">
        <property name="build.file" value="${svn.checkout.dir}/Src/CheckSumTool.build" />
        <nant buildfile="${build.file}" inheritall="true" target="exported_distrib">
            <properties>
                <property name="svn.checkout.dir" value="../" />
            </properties>
        </nant>
    </target>
    
    
    <!-- [4] ENVIRONMENT SETUP TARGETS -->
    
    <!-- Called by 'build' target to setup target-specific properties -->
    <target name="init">
        <call target="${project.config}_setup" />
    </target>

    <!-- This target setups environment for debug target -->
    <target name="debug_setup" description="Sets up debug target">
        <echo message="Setting up debug target..."/>
        <property name="project.config" value="debug" />
        <property name="build.debug" value="true" />
        <property name="build.optimize" value="false"/>
        <property name="build.dir" value="../Build/Debug/" />
        <mkdir dir="../Build/Debug" />
    </target>

    <!-- This target setups environment for release target -->
    <target name="release_setup" description="Sets up release target">
        <echo message="Setting up release target..."/>
        <property name="project.config" value="release" />
        <property name="build.debug" value="false" />
        <property name="build.optimize" value="true"/>
        <property name="build.dir" value="../Build/Release/" />
        <mkdir dir="../Build/Release" />
    </target>

    <!-- [5] BUILD TARGETS - CALLED BY OTHER TARGETS -->
    
    <!-- Do not add SVN export / build dependencies to targets called by other
      targets. Rather call needed targets in high-level tasks. Especially be
      careful not to call SVN export target from multiple targets. -->
    
    <!-- This target removes all files copied/created by build -->
    <target name="clean" description="Clean build files">
        <echo message="Cleaning build files." />
        <delete dir="../Build/Debug" includeemptydirs="true" failonerror="false"/>
        <delete dir="../Build/Release" includeemptydirs="true" failonerror="false"/>
    </target>
    
    <target name="libraries" description="Build libraries" depends="init">
        <echo message="Building libraries..."/>
        <nant buildfile="Utils/Utils.build"
                inheritall="true" target="${project.config}"/>
        <nant buildfile="SumLib/SumLib.build"
                inheritall="true" target="${project.config}"/>
    </target>
    
    <target name="build" description="Default build target" depends="init,libraries">
        <echo message="Running default build target." />
        <csc target="winexe" output="${build.dir}${executable.name}"
             debug="${build.debug}" optimize="${build.optimize}"
             define="${csc.defines}" win32icon="res/CheckSumTool.ico">
            <sources>
                <include name="*.cs"/>
                <include name="Settings/*.cs"/>
	        </sources>
            <resources>
                <include name="*.resx" />
            </resources>
            <references>
                <include name="${build.dir}Utils.dll" />
                <include name="${build.dir}SumLib.dll" />
                <include name="${nunit.dir}/nunit.framework.dll" />
            </references>
        </csc>
    </target>

    <!-- This target exports sources from SVN to separate build folder -->
    <!-- Intent is to do "repository" builds and distributions, not workspace ones. -->
    <target name="svn_export" description="Export sources from SVN">
        <loadtasks assembly="${path::combine(environment::get-variable('NANTCONTRIB_DIR'),
            'bin/NAnt.Contrib.Tasks.dll')}" />
        
        <svn uri="${svn.repository.uri}" destination="${svn.checkout.dir}"
            verbose="true" if="${not svn.export.local}">
            <arg line="export --force ${svn.repository.uri} ${svn.checkout.dir}"/>
        </svn>

        <svn uri="../" verbose="true" if="${svn.export.local}">
            <arg line="export --force ${svn.repository.uri} ${svn.checkout.dir}"/>
        </svn>
    </target>

    <!-- Calls other tasks for creating a distribution. This task is called from
      build file in source folder (while build file which gets called is in the
      export folder. This way we can call tasks in correct context. -->
    <target name="exported_distrib" description="Calls other tasks to create distribution">
        <call target="build_manual" />
        <call target="source_zip" />
        <call target="create_dist" />
        <call target="create_bin_zip" />
        <call target="build_installer" />
    </target>
    
    <!-- Copy binary files and docs to dist folder for making a zip. -->
    <target name="create_dist" description="Creates distribution folder">
        <mkdir dir="${dist.dir}" />
        <copy file="${build.dir}${executable.name}" todir="${dist.dir}" />
        <copy file="${svn.checkout.dir}/Documents/Readme.txt" todir="${dist.dir}" />
        <copy file="${svn.checkout.dir}/Documents/COPYING" todir="${dist.dir}" />
        <copy file="${svn.checkout.dir}/Src/config.xml" todir="${dist.dir}" />
        
        <mkdir dir="${dist.dir}/Docs" />
        <copy file="${svn.checkout.dir}/Documents/ChangeLog.txt"
              todir="${dist.dir}/Docs" />
        <copy file="${svn.checkout.dir}/Documents/Contributors.txt"
              todir="${dist.dir}/Docs" />

        <mkdir dir="${dist.dir}/Manual" />
        <copy todir="${dist.dir}/Manual">
            <fileset basedir="${build.dir.manual}">
                <include name="*.html" />
            </fileset>
        </copy>
        <mkdir dir="${dist.dir}/Manual/Images" />
        <copy todir="${dist.dir}/Manual/Images">
            <fileset basedir="${build.dir.manual}/Images">
                <include name="*.png" />
            </fileset>
        </copy>
    </target>

   <!-- Create a binary file zip, including executable + docs. -->
    <target name="create_bin_zip" description="Create binary zip"
        depends="create_dist">
        <zip zipfile="${svn.checkout.dir}/${project.name}_bin.zip">
            <fileset basedir="${dist.dir}">
            <include name="**/*"/>
            </fileset>
        </zip>
    </target>

    <!-- This target creates a ZIP from exported sources -->
    <target name="source_zip" description="Create a zip package from sources">
        <zip zipfile="${svn.checkout.dir}/${project.name}_src.zip">
            <fileset basedir="${svn.checkout.dir}">
            <include name="**/*"/>
            </fileset>
        </zip>
    </target>

    <!-- Build NSIS installer -->
    <target name="build_installer" description="Builds NSIS installer">
        <echo message="Building installer..." />
        <exec
            workingdir="../installer/NSIS/"
            program="${nsis.bin}"
            commandline=" /V3 /O${nsis.log} ${nsis.script}" />
    </target>

    <!-- Build user manual -->
    <!-- This task uses python and asciidoc to build manual. -->
    <target name="build_manual" description="Builds user manual">
        <echo message="Building user manual..." />
        <exec
            workingdir="${src.dir.manual}"
            program="${python}"
            commandline="${asciidoc} Manual.txt" />
        <mkdir dir="${build.dir.manual}" failonerror="false" />
        <copy todir="${build.dir.manual}">
            <fileset basedir="${src.dir.manual}">
                <include name="*.html" />
            </fileset>
        </copy>
        <mkdir dir="${build.dir.manual}/Images" failonerror="false" />
        <copy todir="${build.dir.manual}/Images">
            <fileset basedir="${src.dir.manual}/Images">
                <include name="*.png" />
            </fileset>
        </copy>
    </target>
</project>
